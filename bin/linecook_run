#! /bin/sh
############################################################################

ssh_config_file=${SSH_CONFIG_FILE:-~/.ssh/config}
remote_dir=${REMOTE_DIR:-\$(pwd)/linecook}
remote_script=${REMOTE_SCRIPT:-run}
xtrace="false"

usage="usage: %s [-F SSH_CONFIG_FILE] [-D REMOTE_DIR] [-S REMOTE_SCRIPT] [-h] [-x] PACKAGE_DIRS...\n"
option="       %s   %s\n"
while getopts "F:D:S:h:x" opt
do
  case $opt in
  F  )  ssh_config_file=$OPTARG ;;
  D  )  remote_dir=$OPTARG ;;
  S  )  remote_script=$OPTARG ;;
  h  )  printf "$usage" $0
        printf "$option" "-F" "the ssh config file"
        printf "$option" "-D" "the remote package dir"
        printf "$option" "-S" "the remote script"
        printf "$option" "-h" "prints this help"
        printf "$option" "-x" "xtrace this script"
        exit 0 ;;
  x  )  xtrace="true" ;;
  \? )  printf "$usage" $0
        exit 2 ;;
  esac
done
shift $(($OPTIND - 1))

if [ "$xtrace" = "true" ]
then set -x
fi

################################### run ####################################

for package_dir in "$@"
do
host=$(basename -- "$package_dir")

# allocate pseudo-tty if possible so the script behaves as if the user
# manually ran it on the VM, but don't force allocation as it can cause
# hanging if no user is available for interaction (ex with su).
if tty > /dev/null
then ttyopt='-t'
fi

ssh -q $ttyopt -F "$ssh_config_file" "$host" -- "$remote_dir/$remote_script"

status=$?
if [ $status -ne 0 ]
then
  echo "[$status] $remote_dir/$remote_script" >&2
  exit 1
fi
done

################################## (run) ###################################
